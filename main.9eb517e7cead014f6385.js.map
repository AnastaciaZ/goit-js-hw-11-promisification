{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GAEV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACPD,EAAQF,KACVA,OAKJI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCfXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAUnBC,EAAkB,SAACC,EAAUC,GAC/B,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAEjE,OAAOhB,QAAQC,QAAQa,IAGrBX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAW7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCjCnC,IAkBMe,EAAkB,SAACC,GACrB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GACzB,IApB2BC,EAAKC,EAoB1BxB,GApBqBuB,EAoBa,IApBRC,EAoBa,IAnB5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAoBrDnB,YAAW,WACWqB,KAAKE,SAAW,GAG/BxB,EAAQ,CAACyB,GAAGP,EAAYO,GAAItB,KAAKN,IAEnCsB,EAAOD,EAAYO,MAEpB5B,OAIC6B,EAAa,SAAC,GAAkB,IAAhBD,EAAgB,EAAhBA,GAAItB,EAAY,EAAZA,KACxBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAaFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACHI,MAAMH,K","file":"main.9eb517e7cead014f6385.js","sourcesContent":["const delay = ms => {\r\n    // return Promise.resolve(ms);\r\n    return new Promise((resolve) => { \r\n        setTimeout(() => { \r\n            resolve(ms);\r\n        },ms)\r\n    })\r\n    };\r\n    \r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n/*\r\nНапиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms\r\nмиллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали\r\nво время вызова функции delay.\r\n*/","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n/*const toggleUserState = (allUsers, userName, callback) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  callback(updatedUsers);\r\n};*/\r\nconst toggleUserState = (allUsers, userName) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    return Promise.resolve(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n//toggleUserState(users, 'Mango', logger);\r\n//toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n/*\r\nПерепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\r\nа принимала всего два параметра allUsers и userName и возвращала промис.*/","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n/*const makeTransaction = (transaction, onSuccess, onError) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      onSuccess(transaction.id, delay);\r\n    } else {\r\n      onError(transaction.id);\r\n    }\r\n  }, delay);\r\n};*/\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => { \r\n        const delay = randomIntegerFromInterval(200, 500);\r\n setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n        resolve({id:transaction.id, time:delay});\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);\r\n    })\r\n};\r\n\r\nconst logSuccess = ({ id, time } ) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n//makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n//makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n//makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n//makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n/*Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции\r\nonSuccess и onError, а принимала всего один параметр transaction и возвращала промис.*/"],"sourceRoot":""}